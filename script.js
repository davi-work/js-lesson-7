// 1. Завершение выполнения блока switch: Когда интерпретатор JavaScript достигает инструкции break, 
// выполнение текущего блока switch...case завершается, и управление передается за пределы этого блока.

// 2. Предотвращение "проваливания" (fall-through): Если break не указан, 
// выполнение будет продолжено на следующем case без проверки его условия. Это может быть полезно, 
// если необходимо выполнить один и тот же блок кода для нескольких условий. 
// Однако, если такое поведение не требуется, break используется для предотвращения проваливания.



/* for (let i = 0; i < Infinity; i++) {  Один из способов переписать на if else
    comand = prompt("Введите команду");
    let [action, name] = comand.split(', '); 
    if (action === "add") {
        array.push(name);
        console.log(array);
    } else if (action === "del") {
        let index = array.indexOf(name);
        if (index > -1) {
            array.splice(index, 1);
        }
        console.log(array);
    } else if (action === "stop") {
        console.log(array);
        break;
    } else {
        console.log("Неизвестная команда");
    }
}  */

// let arr = []
// for(let i = 0; i < Infinity; i++) {
//     let arrAdd = prompt('Введите команду'), addArr = arrAdd.split(', ');
//     if(addArr[0] == 'add') {
//         arr.push(addArr[1])
//     }else if(addArr[0] == 'del') {
//         for(let x = 0; x < arr.length; x++) {
//             arr[x] == addArr[1] ? arr.splice(x, 1) : '';
//         }
//     }else if(addArr[0] == 'stop') {
//         break;
//     }
//     console.log(arr);
// }
// console.log(arr);


// // ************************************
// // // Метод map - используется для преобразования каждого элемента массива, 
// // // создания нового массива с результатами этого преобразования. При этом исходный массив не изменятеся
// const numbers = [1, 2, 3, 4, 5]
// const squaredNumbers = numbers.map(item => item * item )
// console.log(squaredNumbers);

// const words = ["hello", "world"]
// const uppercaseWords = words.map(word => word.toUpperCase())
// console.log(uppercaseWords);
// // // Задача на map: Нужно увеличить каждое число на 2. Мы можем использовать метод map(), 
// // // чтобы преобразовать каждый элемент массива следующим образом:
// // // const squaredNumbers = numbers.map(item => item + 2 )


// // // ************************************
// // // метод filter - применяется к массиву в JavaScript и используется для фильтрации элементов массива 
// // // на основе заданного условия, создавая новый массив из элементов, для которых условие истинно.
// const numbers = [1, 2 ,3, 4, 5, 6] 
// const evenNumbers = numbers.filter(num => num % 2 === 0)
// console.log(evenNumbers);

// const slovoPacana = ["How", "do", "you", "do", "Maratik"]
// const longWords = slovoPacana.filter(word => word.length > 3)
// console.log(longWords); /* Исходный массив не меняется */

// // // нам нужно отфильтровать все числа, которые больше 5
// const numbers = [3, 8, 2, 6, 5, 9];
// const numbersGreaterThanFive = numbers.filter(num => num > 5);
// console.log(numbersGreaterThanFive); // [8, 6, 9]


// // // // ************************************
// // // метод reduce Метод reduce() применяется к массиву в JavaScript и используется для выполнения 
// // // (свода) элементов массива, преобразуя их в единственное значение. 
// // // При помощи метода reduce() можно вычислить сумму всех элементов, объединить элементы в строку, найти наибольший или наименьший элемент и т.д.
// const numbers = [1, 2, 3, 4, 5];
// const sum = numbers.reduce((item, itemValue) => item + itemValue, 0); /* Самое основное применение этого метода */
// console.log(sum); // 15

// const words = ['Hello', 'world', 'how', 'are', 'you'];
// const concatenatedString = words.reduce((word, wordValue) => word + ' ' + wordValue, '');
// console.log(concatenatedString); // 'Hello world how are you'


// // // ************************************
// // метод find используется для поиска первого элемента в массиве, удовлетворяющего условию заданной функции. 
// // Как только такой элемент будет найден, поиск прекращается, и метод возвращает его значение.
// const numbers = [1, 3, 5, 4, 7];
// const firstEvenNumber = numbers.find(num => num % 2 === 0);
// console.log(firstEvenNumber); // 4



// // // ************************************
// // метод sort - используется для сортировки элементов этого массива. 

// const numbers = [4, 2, 7, 1, 5];
// numbers.sort((a, b) => a - b);
// console.log(numbers); // [1, 2, 4, 5, 7]

// // Функция сравнения принимает два аргумента (обычно обозначаются как a и b) и возвращает число:
// // - Если результат отрицательный, a будет расположено перед b;
// // - Если результат положительный, b будет расположено перед a;
// // - Если результат равен нулю, порядок элементов остается неизменным.


// // // ************************************
// // метод reverse - "переворачивает" массив, помещая последний элемент в начало, 
// // предпоследний - на вторую позицию и так далее, изменяя индексы элементов в обратном порядке.

// const numbers = [1, 2, 3, 4, 5];
// numbers.reverse();
// console.log(numbers); // [5, 4, 3, 2, 1] /* Однако исходный массив изменяется */


// // // ************************************
//// метод join - Метод join() в JavaScript используется для объединения всех элементов массива в строку. 
//// Он принимает один аргумент - строку, которая будет использоваться в качестве разделителя между элементами массива при их объединении. 
//// Если аргумент не указан, то по умолчанию в качестве разделителя используется запятая.

// const fruits = ['Apple', 'Orrange', 'Banana']
// const result = fruits.join(', ')
// console.log(result);

const numbers = [1, 2, 3, 4, 5]
// const result = numbers.join()
// console.log(result);

// У вас есть массив слов, и вы хотите вывести их на экран, 
// разделяя запятыми, но последнее слово должно быть разделено союзом "и".

let result = numbers.slice(0, -1).join(', ') + ' и ' + numbers.slice(-1)
console.log(result);

// 1. slice():
//    - Метод slice() создает новый массив, содержащий копию элементов из исходного массива.
//    - Он принимает два аргумента: начальный индекс и конечный индекс (не включая элемент с этим индексом).
//    - Если аргументы не указаны, возвращается копия исходного массива.
//    - Оригинальный массив не изменяется.

// Пример использования slice():

// const fruits = ['яблоко', 'банан', 'груша', 'апельсин', 'манго'];
// const citrus = fruits.slice(2, 4); // ['груша', 'апельсин']

// 2. splice():
//    - Метод splice() изменяет исходный массив, добавляя новые элементы в него или удаляя существующие элементы из него, или и то, и другое.
//    - Он принимает три аргумента: начальный индекс, количество удаляемых элементов и необязательные аргументы - новые элементы, которые будут добавлены.
//    - Возвращает массив удаленных элементов, если таковые имеются.
//    - Модифицирует исходный массив.

// Пример использования splice():

// const months = ['январь', 'февраль', 'март', 'апрель'];
// months.splice(2, 1, 'май'); // Удаляет 'март' и вставляет 'май'
// Теперь months: ['январь', 'февраль', 'май', 'апрель']

// Таким образом, основное различие между slice() и splice() заключается в том, 
// что slice() создает новый массив на основе исходного, в то время как splice() изменяет исходный массив.


// // // ************************************
// Метод pop() в JavaScript используется для удаления последнего элемента из массива и возвращает этот удаленный элемент. 
// Он изменяет исходный массив, уменьшая его длину на один элемент.

// const array = [1, 2, 3, 4, 5];
// const lastElement = array.pop();

// console.log(lastElement); // Выведет: 5
// console.log(array);       // Выведет: [1, 2, 3, 4]


// // // ************************************
// Метод shift() в JavaScript также используется для удаления элемента из массива, но в отличие от pop(), 
// который удаляет последний элемент, shift() удаляет первый элемент из массива. 
// Он также изменяет исходный массив, сдвигая все остальные элементы на одну позицию влево, чтобы заполнить удаленное место.

const array = [1, 2, 3, 4, 5];
const firstElement = array.shift();

console.log(firstElement); // Выведет: 1
console.log(array);        // Выведет: [2, 3, 4, 5]


// Метод unshift() в JavaScript используется для добавления одного или нескольких элементов в 
// начало массива и изменяет сам массив. Он возвращает новую длину массива после добавления элементов.


// // // ************************************
const array = [3, 4, 5];
const newLength = array.unshift(1, 2);

console.log(newLength); // Выведет: 5 (новая длина массива)
console.log(array);     // Выведет: [1, 2, 3, 4, 5]




// // Доп.задачи
// // 1. Посчитай количество слов в предложении.
// // 2. Проверь, является ли заданная строка палиндромом (читается одинаково справа налево и слева направо). /* Возможно понадобится метод join и некоторые другие, но можно и без него */
// // 3. Напиши функцию, которая принимает массив чисел и возвращает новый массив, содержащий только четные числа из исходного массива.




// /////////////////// ПЕРВОЕ ЗАДАНИЕ 
// // 1-ый способ
// let countOfWords = 0
// let sentence     = prompt('Напишите предложение...')
// let arrSentence  = sentence.split(' ')

// for (let i = 1; i <= arrSentence.length; i++) {
//    countOfWords = i 
// }
// console.log(countOfWords);

// // 2-й способ
// let sentence     = prompt('Напишите предложение...');
// let words        = sentence.split(' ');
// let countOfWords = words.length;

// console.log(countOfWords);


// /////////////////// ВТОРОЕ ЗАДАНИЕ 
// // 1-ый способ
// let word       = prompt('Введите слово...')
// let wordArr    = word.split('')
// let wordCheck  = wordArr.toLocaleString().toLowerCase()
// let wordCheck2 = wordArr.reverse().toLocaleString().toLowerCase()
// /* 1. word.split(''): Метод split('') применяется к строке word и разбивает её на массив символов, 
// где каждый символ будет элементом массива. Если строка была, например, 'hello', 
// после этой операции мы получим массив ['h', 'e', 'l', 'l', 'o'].
// 2. .reverse(): Метод reverse() применяется к полученному массиву и изменяет порядок элементов на обратный. 
// Таким образом, если у нас был массив ['h', 'e', 'l', 'l', 'o'], после применения reverse() мы получим массив ['o', 'l', 'l', 'e', 'h'].
// 3. .join(''): Метод join('') объединяет элементы массива в строку, 
// используя указанный разделитель (в данном случае, пустая строка ''). 
// Таким образом, массив ['o', 'l', 'l', 'e', 'h'] будет объединен в строку 'olleh'.
// Таким образом, строка let reversedWord = word.split('').reverse().join(''); берет строку word, разбивает ее на массив символов, 
// переворачивает порядок элементов в массиве и затем объединяет эти элементы обратно в строку. 
// В результате переменная reversedWord будет содержать обратное слово к исходному слову word. */

// if(wordCheck == wordCheck2){
//   alert('Введеное слово - палиндром')
// } else{
//   alert('Слово не палиндром')
// }

// // 2-й способ
// let word         = prompt('Введите слово...');
// let reversedWord = word.split('').reverse().join('');

// if (word.toLowerCase() === reversedWord.toLowerCase()) {
//   alert('Введенное слово является палиндромом');
// } else {
//   alert('Слово не является палиндромом');
// }

// /////////////////// ТРЕТЬЕ ЗАДАНИЕ
// let nums     = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
// let evenNums = []
// function returnEven() {
//   for (let i = 0; i < nums.length; i++) {
//     const element = i;
//     if (element % 2 == 0) {
//       evenNums.push(element)
//     }
//     console.log(evenNums);
//   }
// }
// returnEven()